name: JMeter Master

on:
  workflow_dispatch:
    inputs:
      slave_ip:
        description: 'IP address of the JMeter slave'
        required: true
        type: string

jobs:
  jmeter-master:
    runs-on: self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
        sudo rm -f /usr/share/keyrings/docker-archive-keyring.gpg
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: Create custom jmeter.properties
      run: |
        echo "server.rmi.ssl.disable=true" >> $GITHUB_WORKSPACE/jmeter.properties

    - name: Debug Network from runner
      run: |
        echo "Pinging from runner to ${{ github.event.inputs.slave_ip }}"
        ping -c 4 ${{ github.event.inputs.slave_ip }}

    - name: Debug Network from Docker container
      run: |
        echo "Pinging from Docker container to ${{ github.event.inputs.slave_ip }}"
        sudo docker run --network host alpine ping -c 4 ${{ github.event.inputs.slave_ip }}

    - name: Run JMeter Master
      run: |
        echo "${{ github.event.inputs.slave_ip }}" > $GITHUB_WORKSPACE/slaves.txt
        sudo docker run \
          --network host \
          -v $GITHUB_WORKSPACE:/workspace \
          -v $GITHUB_WORKSPACE/jmeter.properties:/opt/apache-jmeter-5.4.1/bin/user.properties \
          justb4/jmeter:latest \
          -n -t /workspace/your_test_plan.jmx -R${{ github.event.inputs.slave_ip }}

    - name: Upload JTL file
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: jmeter-results
        path: $GITHUB_WORKSPACE/*.jtl

    - name: Post-test cleanup
      run: |
        echo "Test completed. Cleaning up..."
